"use client";
import React from "react";
import CustomVideoPlayer from "@/components/video/CustomVideoPlayer";
import type { Module } from "../types";
import type { ModuleContentData } from "../hooks/useModuleContent";
import { FileText, Download, CheckCircle, BookOpen, ArrowLeft, ChevronRight } from "lucide-react";
import { DocumentViewer, type DocumentAttachment } from "@/components/document/DocumentViewer";

interface Props { module: Module | null; content: ModuleContentData | undefined; loading: boolean; onPrev:()=>void; onNext:()=>void; hasPrev:boolean; hasNext:boolean; markCompleted:(id:string)=>void; formatDuration:(s:number)=>string; }
export const ModuleContent: React.FC<Props> = ({ module, content, loading, onPrev, onNext, hasPrev, hasNext, markCompleted }) => {
  const [doc, setDoc] = React.useState<DocumentAttachment | null>(null);
  if (!module) return <div className="flex items-center justify-center h-full"><div className="text-gray-400">Select a lesson to start learning</div></div>;
  return (<div className="max-w-5xl mx-auto p-4 sm:p-6 relative z-10">{loading && <div className="text-center py-12"><div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-500 mx-auto mb-4"/><p className="text-gray-400 text-sm">Loading lesson content...</p></div>}{!loading && <div className="space-y-6">{module.type==='video' && content?.videoUrl && <div className="aspect-video bg-black rounded-xl overflow-hidden border border-gray-700/30"><CustomVideoPlayer src={content.videoUrl} title={module.title} onEnded={()=> markCompleted(module.id)} documents={content.attachments?.map(a=> ({ id:a.id, title:a.originalName, url:a.url, type: (a.type as any)||'other' }))} className="w-full h-full"/></div>}{module.type==='document' && content?.documentUrl && <div className="rounded-xl overflow-hidden border border-gray-700/30"><div className="bg-gradient-to-r from-blue-600/20 to-purple-600/20 p-4 border-b border-gray-700/30"><h3 className="text-white font-semibold flex items-center gap-2"><FileText size={20} className="text-blue-400"/>{module.title}</h3></div><div className="bg-gray-900/50 p-4 flex gap-3"><button onClick={()=> setDoc({ id: module.id, title: module.title, url: content.documentUrl!, type:'pdf' })} className="flex-1 flex items-center justify-center gap-3 px-6 py-4 bg-gradient-to-r from-blue-600 to-blue-700 text-white rounded-lg"><FileText size={20}/>Open Document</button><button onClick={()=> markCompleted(module.id)} className="px-6 py-4 bg-gradient-to-r from-green-600 to-green-700 text-white rounded-lg flex items-center gap-2"><CheckCircle size={20}/>Complete</button></div></div>}{module.description && <div className="rounded-xl p-6 border border-gray-700/30 bg-black/30"><h2 className="text-lg font-semibold text-white mb-3 flex items-center gap-2"><BookOpen size={20} className="text-blue-400"/>About This Lesson</h2><p className="text-gray-300 leading-relaxed text-base">{module.description}</p></div>}{content?.attachments && content.attachments.length>0 && <div className="rounded-xl p-6 border border-gray-700/30 bg-black/30"><h2 className="text-lg font-semibold text-white mb-4 flex items-center gap-2"><Download size={20} className="text-green-400"/>Resources</h2><div className="grid gap-3">{content.attachments.map(a=> <div key={a.id} className="flex items-center justify-between p-4 bg-gray-800/30 rounded-lg border border-gray-700/30"><div className="flex items-center gap-3"><div className="p-2 bg-blue-500/20 rounded-lg border border-blue-500/30"><FileText className="text-blue-400" size={18}/></div><div><p className="text-white font-medium text-sm">{a.originalName}</p><p className="text-gray-400 text-xs">{(a.size/1024/1024).toFixed(2)} MB</p></div></div><a href={a.url} download={a.originalName} className="flex items-center gap-2 px-4 py-2 bg-gradient-to-r from-blue-600 to-blue-700 text-white rounded-lg text-sm"><Download size={14}/>Download</a></div>)}</div></div>}<div className="flex justify-between items-center pt-4"><div>{hasPrev && <button onClick={onPrev} className="flex items-center gap-2 px-4 py-2 bg-gray-800/50 text-white rounded hover:bg-gray-700/50 text-sm"><ArrowLeft size={16}/>Previous</button>}</div><div>{hasNext && <button onClick={onNext} className="flex items-center gap-2 px-4 py-2 bg-gradient-to-r from-blue-600 to-blue-700 text-white rounded text-sm">Next<ChevronRight size={16}/></button>}</div></div></div>}{doc && <DocumentViewer document={doc} onClose={()=> setDoc(null)} />}</div>);
};
